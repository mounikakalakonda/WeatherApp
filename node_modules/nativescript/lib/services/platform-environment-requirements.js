"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../common/helpers");
const os_1 = require("os");
class PlatformEnvironmentRequirements {
    constructor($doctorService, $errors, $logger, $prompter, $staticConfig, $analyticsService, $injector, $previewQrCodeService) {
        this.$doctorService = $doctorService;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$prompter = $prompter;
        this.$staticConfig = $staticConfig;
        this.$analyticsService = $analyticsService;
        this.$injector = $injector;
        this.$previewQrCodeService = $previewQrCodeService;
    }
    get $previewAppController() {
        return this.$injector.resolve("previewAppController");
    }
    checkEnvironmentRequirements(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const { platform, projectDir, runtimeVersion } = input;
            const notConfiguredEnvOptions = input.notConfiguredEnvOptions || {};
            const options = input.options || {};
            let selectedOption = null;
            if (process.env.NS_SKIP_ENV_CHECK) {
                yield this.$analyticsService.trackEventActionInGoogleAnalytics({
                    action: "Check Environment Requirements",
                    additionalData: "Skipped: NS_SKIP_ENV_CHECK is set"
                });
                return {
                    canExecute: true,
                    selectedOption
                };
            }
            const canExecute = yield this.$doctorService.canExecuteLocalBuild({ platform, projectDir, runtimeVersion, forceCheck: input.forceCheck });
            if (!canExecute) {
                if (!helpers_1.isInteractive()) {
                    yield this.$analyticsService.trackEventActionInGoogleAnalytics({
                        action: "Check Environment Requirements",
                        additionalData: "Non-interactive terminal, unable to execute local builds."
                    });
                    this.fail(this.getNonInteractiveConsoleMessage(platform));
                }
                const infoMessage = this.getInteractiveConsoleMessage(notConfiguredEnvOptions);
                const choices = this.getChoices(notConfiguredEnvOptions);
                selectedOption = yield this.promptForChoice({ infoMessage, choices });
                this.processManuallySetupIfNeeded(selectedOption, platform);
                yield this.processSyncToPreviewAppIfNeeded(selectedOption, projectDir, options);
                if (selectedOption === PlatformEnvironmentRequirements.LOCAL_SETUP_OPTION_NAME) {
                    yield this.$doctorService.runSetupScript();
                    if (yield this.$doctorService.canExecuteLocalBuild({ platform, projectDir, runtimeVersion, forceCheck: input.forceCheck })) {
                        return {
                            canExecute: true,
                            selectedOption
                        };
                    }
                    this.fail(PlatformEnvironmentRequirements.NOT_CONFIGURED_ENV_AFTER_SETUP_SCRIPT_MESSAGE);
                }
            }
            return {
                canExecute,
                selectedOption
            };
        });
    }
    processManuallySetupIfNeeded(selectedOption, platform) {
        if (selectedOption === PlatformEnvironmentRequirements.MANUALLY_SETUP_OPTION_NAME) {
            this.processManuallySetup(platform);
        }
    }
    processSyncToPreviewAppIfNeeded(selectedOption, projectDir, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (selectedOption === PlatformEnvironmentRequirements.SYNC_TO_PREVIEW_APP_OPTION_NAME) {
                if (!projectDir) {
                    this.$errors.fail(`No project found. In order to sync to playground you need to go to project directory or specify --path option.`);
                }
                yield this.$previewAppController.startPreview({
                    projectDir,
                    env: options.env,
                    useHotModuleReload: options.hmr,
                });
                yield this.$previewQrCodeService.printLiveSyncQrCode({ projectDir, useHotModuleReload: options.hmr, link: options.link });
            }
        });
    }
    processManuallySetup(platform) {
        this.fail(`To be able to ${platform ? `build for ${platform}` : 'build'}, verify that your environment is configured according to the system requirements described at ${this.$staticConfig.SYS_REQUIREMENTS_LINK}. If you have any questions, check Stack Overflow: 'https://stackoverflow.com/questions/tagged/nativescript' and our public Slack channel: 'https://nativescriptcommunity.slack.com/'`);
    }
    fail(message) {
        this.$errors.fail({ formatStr: message, printOnStdout: true });
    }
    getNonInteractiveConsoleMessage(platform) {
        return this.buildMultilineMessage([
            `${PlatformEnvironmentRequirements.MISSING_LOCAL_SETUP_MESSAGE} ${PlatformEnvironmentRequirements.CHOOSE_OPTIONS_MESSAGE}`,
            PlatformEnvironmentRequirements.RUN_PREVIEW_COMMAND_MESSAGE,
            PlatformEnvironmentRequirements.RUN_TNS_SETUP_MESSAGE,
            this.getEnvVerificationMessage()
        ]);
    }
    getInteractiveConsoleMessage(options) {
        const message = PlatformEnvironmentRequirements.MISSING_LOCAL_SETUP_MESSAGE;
        const choices = [
            `Select "Configure for Local Builds" to run the setup script and automatically configure your environment for local builds.`,
            `Select "Skip Step and Configure Manually" to disregard this option and install any required components manually.`
        ];
        if (!options.hideSyncToPreviewAppOption) {
            choices.unshift(PlatformEnvironmentRequirements.SYNC_TO_PREVIEW_APP_MESSAGE);
        }
        const lines = [message].concat(choices);
        const result = this.buildMultilineMessage(lines);
        return result;
    }
    promptForChoice(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$logger.info(opts.infoMessage);
            yield this.$analyticsService.trackEventActionInGoogleAnalytics({
                action: "Check Environment Requirements",
                additionalData: `User should select: ${opts.infoMessage}`
            });
            const selection = yield this.$prompter.promptForChoice(PlatformEnvironmentRequirements.CHOOSE_OPTIONS_MESSAGE, opts.choices);
            yield this.$analyticsService.trackEventActionInGoogleAnalytics({
                action: "Check Environment Requirements",
                additionalData: `User selected: ${selection}`
            });
            return selection;
        });
    }
    getEnvVerificationMessage() {
        return `Verify that your environment is configured according to the system requirements described at ${this.$staticConfig.SYS_REQUIREMENTS_LINK}.`;
    }
    buildMultilineMessage(parts) {
        return parts.join(os_1.EOL);
    }
    getChoices(options) {
        const choices = [];
        choices.push(...[PlatformEnvironmentRequirements.LOCAL_SETUP_OPTION_NAME,
            PlatformEnvironmentRequirements.MANUALLY_SETUP_OPTION_NAME]);
        if (!options.hideSyncToPreviewAppOption) {
            choices.unshift(PlatformEnvironmentRequirements.SYNC_TO_PREVIEW_APP_OPTION_NAME);
        }
        return choices;
    }
}
PlatformEnvironmentRequirements.LOCAL_SETUP_OPTION_NAME = "Configure for Local Builds";
PlatformEnvironmentRequirements.SYNC_TO_PREVIEW_APP_OPTION_NAME = "Sync to Playground";
PlatformEnvironmentRequirements.MANUALLY_SETUP_OPTION_NAME = "Skip Step and Configure Manually";
PlatformEnvironmentRequirements.CHOOSE_OPTIONS_MESSAGE = "To continue, choose one of the following options: ";
PlatformEnvironmentRequirements.NOT_CONFIGURED_ENV_AFTER_SETUP_SCRIPT_MESSAGE = `The setup script was not able to configure your environment for local builds. To execute local builds, you have to set up your environment manually. Please consult our setup instructions here 'https://docs.nativescript.org/start/quick-setup'.`;
PlatformEnvironmentRequirements.MISSING_LOCAL_SETUP_MESSAGE = "Your environment is not configured properly and you will not be able to execute local builds.";
PlatformEnvironmentRequirements.RUN_TNS_SETUP_MESSAGE = 'Run $ tns setup command to run the setup script to try to automatically configure your environment for local builds.';
PlatformEnvironmentRequirements.SYNC_TO_PREVIEW_APP_MESSAGE = `Select "Sync to Playground" to enjoy NativeScript without any local setup. All you need is a couple of companion apps installed on your devices.`;
PlatformEnvironmentRequirements.RUN_PREVIEW_COMMAND_MESSAGE = `Run $ tns preview command to enjoy NativeScript without any local setup.`;
__decorate([
    helpers_1.hook("checkEnvironment")
], PlatformEnvironmentRequirements.prototype, "checkEnvironmentRequirements", null);
exports.PlatformEnvironmentRequirements = PlatformEnvironmentRequirements;
$injector.register("platformEnvironmentRequirements", PlatformEnvironmentRequirements);
